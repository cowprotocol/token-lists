name: Process Token Request

# Handles token addition, removal, and image optimization requests
# Validates input, processes images, and creates PRs with appropriate reviewers

on:
  issues:
    types: [opened]

env:
  FIELD_NAMES: 'Network,Symbol,Name,URL,Decimals,Address,Reason'
  IMAGES_BASE_PATH: src/public/images/
  LIST_PATH: src/public/CowSwap.json

jobs:
  process-request:
    runs-on: ubuntu-latest
    outputs:
      operation: ${{ steps.extract-info.outputs.operation }}
      issueInfo: ${{ steps.extract-info.outputs.issueInfo }}
      needsImageOptimization: ${{ steps.extract-info.outputs.needsImageOptimization }}
    if: contains(github.event.issue.labels.*.name, 'addImage') || contains(github.event.issue.labels.*.name, 'addToken') || contains(github.event.issue.labels.*.name, 'removeToken')

    steps:
      - name: Acknowledge request
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            üîÑ Your request has been received and is being processed.
            This issue will be updated when completed.

      - name: Extract and validate issue information
        id: extract-info
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const { issue } = context.payload;
            const body = issue.body;
            const labels = issue.labels.map(l => l.name);

            // Network configuration mapping
            const NETWORK_CONFIG = {
              'MAINNET': { chainId: 1, blockExplorer: 'etherscan.io' },
              'ARBITRUM_ONE': { chainId: 42161, blockExplorer: 'arbiscan.io' },
              'BASE': { chainId: 8453, blockExplorer: 'basescan.org' },
              'AVALANCHE': { chainId: 43114, blockExplorer: 'snowscan.xyz' },
              'POLYGON': { chainId: 137, blockExplorer: 'polygonscan.com' },
              'BNB': { chainId: 56, blockExplorer: 'bscscan.com' },
              'LENS': { chainId: 232, blockExplorer: 'explorer.lens.xyz' },
              'GNOSIS': { chainId: 100, blockExplorer: 'gnosisscan.io' }
            };

            // Extract field values
            const fieldNames = process.env.FIELD_NAMES.split(',');
            const values = fieldNames.reduce((acc, field) => {
              const regex = new RegExp(`${field}\\s+(?<${field.toLowerCase()}>.*?)(\\s+###|$)`, 's');
              return { ...acc, ...body.match(regex)?.groups };
            }, {});

            // Normalize address
            if (values.address) {
              values.address = values.address.toLowerCase();
            }

            // Add network configuration
            const networkConfig = NETWORK_CONFIG[values.network] || NETWORK_CONFIG['GNOSIS'];
            Object.assign(values, networkConfig);

            // Generate URLs
            if (values.chainId && values.address) {
              values.prImageUrl = `https://raw.githubusercontent.com/cowprotocol/token-lists/{0}/${ values.chainId }_${ values.address }/src/public/images/${ values.chainId }/${ values.address }/logo.png`;
              // Will be the final URL once it's merged to `main`
              values.logoURI = `https://raw.githubusercontent.com/cowprotocol/token-lists/main/src/public/images/${ values.chainId }/${ values.address }/logo.png`;
            }

            // Validation rules
            const validationRules = {
              addImage: ['network', 'url', 'address'],
              addToken: ['network', 'symbol', 'name', 'url', 'decimals', 'address', 'reason'],
              removeToken: ['network', 'reason', 'address']
            };

            // Determine operation type
            const operation = labels.find(label => ['addImage', 'addToken', 'removeToken'].includes(label));

            if (!operation) {
              throw new Error('No valid operation label found');
            }

            // Validate required fields
            const requiredFields = validationRules[operation] || [];
            const missingFields = requiredFields.filter(field => !values[field]);

            if (missingFields.length > 0) {
              throw new Error(`Missing required fields for ${operation}: ${missingFields.join(', ')}`);
            }

            // Additional validations
            if (values.symbol && values.symbol.includes(' ')) {
              throw new Error('Symbol cannot contain spaces');
            }

            // Set outputs for use in subsequent steps
            core.setOutput('operation', operation);
            core.setOutput('issueInfo', JSON.stringify(values));
            core.setOutput('needsImageOptimization', ['addImage', 'addToken'].includes(operation));

      - name: Handle validation errors
        if: failure()
        uses: peter-evans/close-issue@276d7966e389d888f011539a86c8920025ea0626
        with:
          comment: |
            ‚ùå **Invalid request**

            Validation failed. Please check all required fields are provided and submit a new issue.

  optimize-image:
    needs: process-request
    if: needs.process-request.outputs.needsImageOptimization == 'true'
    uses: ./.github/workflows/optimizeImage.yml
    with:
      url: ${{ fromJSON(needs.process-request.outputs.issueInfo).url }}
      address: ${{ fromJSON(needs.process-request.outputs.issueInfo).address }}

  execute-add-token:
    needs: [process-request, optimize-image]
    if: needs.process-request.outputs.operation == 'addToken'
    uses: ./.github/workflows/executeAction.yml
    secrets: inherit
    with:
      issueInfo: ${{ needs.process-request.outputs.issueInfo }}
      operation: addToken
      prTitle: '[addToken] `${{ fromJSON(needs.process-request.outputs.issueInfo).symbol }}` to `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`'
      prBody: |
        Adding token `${{ fromJSON(needs.process-request.outputs.issueInfo).symbol }}` on network `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`

        **Address**: `${{ fromJSON(needs.process-request.outputs.issueInfo).address }}`

        [Link to block explorer ‚ÜóÔ∏é](https://${{ fromJSON(needs.process-request.outputs.issueInfo).blockExplorer }}/token/${{ fromJSON(needs.process-request.outputs.issueInfo).address }})

        | Description | Image |
        |-|-|
        | Original | ![original](${{ fromJSON(needs.process-request.outputs.issueInfo).url }}) |
        | Optimized | ![optimized](${{ format(fromJSON(needs.process-request.outputs.issueInfo).prImageUrl, 'addToken') }}) |

        ### Reason

        ```
        ${{ fromJSON(needs.process-request.outputs.issueInfo).reason }}
        ```

  execute-remove-token:
    needs: process-request
    if: needs.process-request.outputs.operation == 'removeToken'
    uses: ./.github/workflows/executeAction.yml
    secrets: inherit
    with:
      issueInfo: ${{ needs.process-request.outputs.issueInfo }}
      operation: removeToken
      prTitle: '[removeToken] `${{ fromJSON(needs.process-request.outputs.issueInfo).address }}` from `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`'
      prBody: |
        Removing token from network `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`

        **Address**: `${{ fromJSON(needs.process-request.outputs.issueInfo).address }}`

        [Link to block explorer ‚ÜóÔ∏é](https://${{ fromJSON(needs.process-request.outputs.issueInfo).blockExplorer }}/token/${{ fromJSON(needs.process-request.outputs.issueInfo).address }})

        ### Reason

        ```
        ${{ fromJSON(needs.process-request.outputs.issueInfo).reason }}
        ```

  execute-add-image:
    needs: [process-request, optimize-image]
    if: always() && needs.process-request.outputs.operation == 'addImage'
    uses: ./.github/workflows/executeAction.yml
    secrets: inherit
    with:
      issueInfo: ${{ needs.process-request.outputs.issueInfo }}
      operation: addImage
      prTitle: '[addImage] `${{ fromJSON(needs.process-request.outputs.issueInfo).address }}` to `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`'
      prBody: |
        Adding image to network `${{ fromJSON(needs.process-request.outputs.issueInfo).network }}`

        **Address**: `${{ fromJSON(needs.process-request.outputs.issueInfo).address }}`

        [Link to block explorer ‚ÜóÔ∏é](https://${{ fromJSON(needs.process-request.outputs.issueInfo).blockExplorer }}/token/${{ fromJSON(needs.process-request.outputs.issueInfo).address }})

        | Description | Image |
        |-|-|
        | Original | ![original](${{ fromJSON(needs.process-request.outputs.issueInfo).url }}) |
        | Optimized | ![optimized](${{ format(fromJSON(needs.process-request.outputs.issueInfo).prImageUrl, 'addImage') }}) |
